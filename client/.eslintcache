[{"C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\index.js":"1","C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\App.js":"2","C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\reportWebVitals.js":"3","C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\PostList.js":"4","C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\Post.js":"5","C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\AppViews.js":"6","C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\PostForm.js":"7"},{"size":547,"mtime":1610730398111,"results":"8","hashOfConfig":"9"},{"size":346,"mtime":1610734545114,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":635,"mtime":1610732027518,"results":"12","hashOfConfig":"9"},{"size":541,"mtime":1610731356224,"results":"13","hashOfConfig":"9"},{"size":492,"mtime":1610735001512,"results":"14","hashOfConfig":"9"},{"size":5028,"mtime":1610745902486,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1y4vvrg",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\index.js",[],["33","34"],"C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\App.js",["35"],"import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.css\";\nimport AppViews from \"./components/AppViews\";\nimport PostList from './components/PostList';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <AppViews />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\reportWebVitals.js",[],"C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\PostList.js",[],"C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\Post.js",[],"C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\AppViews.js",[],"C:\\Users\\terra\\workspace43\\csharp\\Gifter\\Gifter\\client\\src\\components\\PostForm.js",["36"],"import React, { useContext, useState } from \"react\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PostContext } from './PostProvider';\r\n\r\nexport const PostForm = () => {\r\n    const [post, setPost] = useState({})\r\n    //wait for data before button is active\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const {postId} = useParams();\r\n\tconst history = useHistory();\r\n    \r\n    //when field changes, update state. This causes a re-render and updates the view.\r\n    //Controlled component\r\n    const handleControlledInputChange = (event) => {\r\n        //When changing a state object or array, \r\n        //always create a copy make changes, and then set state.\r\n        const newPost = { ...post }\r\n        //animal is an object with properties. \r\n        //set the property to the new value\r\n        newPost[event.target.name] = event.target.value\r\n        //update state\r\n        setPost(newPost)\r\n    }\r\n    \r\n    // Get customers and locations. If animalId is in the URL, getAnimalById\r\n    useEffect(() => {\r\n        if(postId){\r\n            fetch(\"/api/post\")\r\n            .then(data => {\r\n                setPost(data)\r\n                setIsLoading(false)\r\n            })\r\n        } else {\r\n        setIsLoading(false)\r\n        }\r\n\r\n    }, [])\r\n    \r\n    const constructPostObject = () => {\r\n            //disable the button - no extra clicks\r\n            setIsLoading(true);\r\n            if (postId){\r\n                //PUT - update\r\n                updatePost({\r\n                    Id: post.id,\r\n                    Title: post.name,\r\n                    ImageUrl: post.breed,\r\n                    Caption: post.locationId,\r\n                    DateCreated: parseInt(post.customerId),\r\n                    UserProfileId: parseInt(post.customerId)\r\n                })\r\n                .then(() => history.push(`/animals/detail/${animal.id}`))\r\n            }else {\r\n                //POST - add\r\n                addAnimal({\r\n                    name: animal.name,\r\n                    breed: animal.breed,\r\n                    locationId: parseInt(animal.locationId),\r\n                    customerId: parseInt(animal.customerId)\r\n                })\r\n                .then(() => history.push(\"/animals\"))\r\n            }\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <form className=\"animalForm\">\r\n            <h2 className=\"animalForm__title\">{animalId ? \"Edit Animal\" : \"Add Animal\"}</h2>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"animalName\">Animal name: </label>\r\n                    <input type=\"text\" id=\"animalName\" name=\"name\" required autoFocus className=\"form-control\" \r\n                    placeholder=\"Animal name\" \r\n                    onChange={handleControlledInputChange} \r\n                    defaultValue={animal.name}/>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"animalBreed\">Animal breed: </label>\r\n                    <input type=\"text\" id=\"animalBreed\" name=\"breed\" className=\"form-control\" \r\n                    placeholder=\"Breed\" \r\n                    onChange={handleControlledInputChange} \r\n                    defaultValue={animal.breed}/>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"location\">Assign to location: </label>\r\n                    <select value={animal.locationId} name=\"locationId\" id=\"animalLocation\" className=\"form-control\" onChange={handleControlledInputChange}>\r\n                        <option value=\"0\">Select a location</option>\r\n                        {locations.map(l => (\r\n                            <option key={l.id} value={l.id}>\r\n                                {l.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <fieldset>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"customer\">Customer: </label>\r\n                    <select value={animal.customerId} name=\"customerId\" id=\"customerAnimal\" className=\"form-control\" onChange={handleControlledInputChange}>\r\n                        <option value=\"0\">Select a customer</option>\r\n                        {customers.map(c => (\r\n                            <option key={c.id} value={c.id}>\r\n                                {c.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </fieldset>\r\n            <button className=\"btn btn-primary\"\r\n                disabled={isLoading}\r\n                onClick={event => {\r\n                    event.preventDefault() // Prevent browser from submitting the form\r\n                    constructAnimalObject()\r\n                }}>\r\n            {animalId ? \"Save Animal\" : \"Add Animal\"}</button>\r\n        </form>\r\n    )\r\n}",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":5,"column":8,"nodeType":"43","messageId":"44","endLine":5,"endColumn":16},{"ruleId":null,"fatal":true,"severity":2,"message":"45","line":122,"column":1},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'PostList' is defined but never used.","Identifier","unusedVar","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 120 | \u001b[39m        \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mform\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 121 | \u001b[39m    )\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 122 | \u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m     | \u001b[39m\u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]